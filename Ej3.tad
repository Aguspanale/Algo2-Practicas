a)

representación:
	palin se representa con estr, donde
		estr es tupla⟨
			long: nat
			palabra: vector(α)
		⟩

invariante de representación:
	Rep: estr → bool
	(∀e: estr) Rep(e) ≡ true ⇔ e.long = long(e.palabra) ∧ esPalindromo(e.palabra)

esPalindromo(palabra) ≡ if long(palabra) = 1 ∨ long(palabra) = 0 then 
							true
						else 
							prim(palabra) = ult(palabra) ∧ esPalindromo(com(fin(palabra)))

Ver si se puede hacer esto de recursion.

función de abstracción:
	Abs: estr e → palindromo { Rep(e) }
	(∀e: estr) Abs(e) =obs a: palindromo | ver(a) =  e.palabra

ver si esta bien esto de ver(a) = e.palabra 