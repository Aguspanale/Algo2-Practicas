La otra operacion siempre debe ser un parte aparte de la tupla?

representación:
	oficina se representa con estr, donde
		estr es tupla⟨
			tramitesXCat: dicc(categoria,conj(id)),
			pendientes: secu(id)
			tramites: dicc(id,categoria),
			
			catPrioritarias:conj(categoria),
			pendPrioritarios: secu(id)
		⟩

1. catPrioritarias ⊂ claves(tramitesXCat)
2. pendPrioritarios ⊂ pendientes
3. todos los pendientes tienen que estar definidos en tramites.
4. todos los id de tramites estan en el conj(ids) de tramitesXCat
5. Los ids que estan en conj(id) esten en pendientes
6. Los pendPrioritarios esten bien clasificados.
7. sin repetidos pendientes y pendPrioritarios

invariante de representación:
	Rep: estr → bool
	(∀e: estr) Rep(e) ≡ true ⇔ 1 ∧ 2 ∧ 3 ∧L 4 ∧ 5 ∧ 6 ∧ 7

1.e.catPrioritarias ⊂ claves(tramitesXCat) 
2.(∀i:nat)(∃j:nat)(0≤i <long(e.pendPrioritarios) ⟹L 0≤j<long(e.pendientes) ∧L e.pendientes[j] = e.pendPrioritarios[i]) 
3.(∀i : id)(esta?(i,e.pendientes) ⟺ def?(i,e.tramites))  
4.(∀i : id)(def?(i,e.tramites) ⟹L def?(obtener(i,e.tramites),e.tramitesXCat) ∧L i ∈ obtener(obtener(i,e.tramites),e.tramitesXCat))
5.(∀cat:categoria)(def?(cat,e.tramitesXCat) ⟹L 
	(∀i:id)(i ∈ obtener(cat,e.tramitesXCat) ⟹L esta?(i,e.pendientes) ∧ obtener(i,e.tramites) = cat)))
6.(∀i:id)(esta?(i,e.pendPrioritarios) ⟹L obtener(i,e.tramites) ∈ e.catPrioritarias)
7. sinRepetidos(e.pendientes) ∧ sinRepetidos(e.pendPrioritarios)

función de abstracción:
	Abs: estr e → oficina { Rep(e) }
	(∀e: estr) Abs(e) =obs a |
		 categorias(a)= claves(e.tramitesXCat) ∧
		 pendientes(a) = e.pendientes ∧
		 priotarias(a) = e.catPrioritarias ∧L 
		 (∀i : id)(def?(i,e.tramites) ⟹L obtener(i,e.tramites) = catTram(i,a))