//Ejercicio 1 
a) 
representación:
    cacotada se representa con estr, donde
        estr es tupla⟨
            inicio: nat,
            fin: nat
            elem: array [0,...,n]
        ⟩

invariante de representación:
    Rep: estr → bool
    (∀e: estr) Rep(e) ≡ true ⇔ 0 ≤ e.inicio < |e.elem| ∧ 0 ≤ e.final < |e.elem| ∧L 
        (e.inicio > e.fin ∧L (∀i: nat)(0 ≤ i < e.fin ⟹ e.elem[i] != 0) ∧ 
        (∀i: nat)(e.fin ≤ i < e.inicio ⟹L e.elem[i] = 0) ∧ (∀i: nat)(e.inicio ≤ i < |e.elem| ⟹ e.elem[i] = 0)) 
        ∨
        (e.inicio < e.fin ∧L (∀i: nat)(0 ≤ i < e.inicio ⟹ e.elem[i] = 0) ∧ 
        (∀i: nat)(e.inicio ≤ i < e.fin ⟹L e.elem[i] != 0) ∧ (∀i: nat)(e.fin ≤ i < |e.elem| ⟹ e.elem[i] = 0))
        ∨
        (e.inicio = e.fin ∧L (∀i: nat)(0 ≤ i < tam(e.elem) ⟹ e.elem[i] = 0))

función de abstracción:
    Abs: estr e → cacotada { Rep(e) }
    (∀e: estr) Abs(e) =obs a:cacotada | (capacidad(a) = e.fin - e.inicio) ∨ (capacidad(a) = tam(e.elem) - e.inicio + e.fin) ∧L
    verCola(a) = construirCola(e.elem,e.inicio,e.fin)

construirCola(sec,inicio,fin) ≡ if inicio = fin ∨ (inicio = tam(sec) ∧ fin = 0) then vacia
                                else if inicio < fin then
                                    encolar(sec[inicio], construirCola(sec,inicio + 1, fin))
                                else // inicio > fin
                                    if fin = 0 then
                                        encolar(sec[inicio], construirCola(sec,inicio + 1, fin))
                                    else
                                        encolar(sec[fin-1], construirCola(sec,inicio, fin-1))
                                    fi
                                fi


[1,1,1,1,0,0,0,1,1,1] = 10 
fin = 3
inicio = 7

[0,0,1,1,1,1]
inicio = 2
fin = 0


[0,0,1,1,1,0]
inicio = 2
fin = 5

[0,0,1,0]
inicio = 2
fin = 3

[0,0,0,0] inicio = fin

b)

